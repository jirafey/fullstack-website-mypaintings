/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.RequestGoscReserve;
import com.example.model.ResponseGoscReserve;
import com.example.model.ResponseGoscZamowienia;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-04-01T20:32:28.347647700+02:00[Europe/Warsaw]")
@Validated
public interface GoscApi {

    Logger log = LoggerFactory.getLogger(GoscApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Zarezerwuj obraz (Gosc)", description = "Endpoint pozwala gościowi zarezerwować obraz.", tags={ "Gosc" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Rezerwacja zakończona sukcesem", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseGoscReserve.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/gosc/reserve",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseGoscReserve> goscReservePost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestGoscReserve body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Obraz został zarezerwowany.\"\r\n}", ResponseGoscReserve.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default GoscApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę zamówień gościa", description = "Endpoint zwraca listę zamówień danego gościa. Wymaga tokenu JWT.", tags={ "Gosc" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseGoscZamowienia.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "403", description = "Brak dostępu") })
    @RequestMapping(value = "/gosc/zamowienia",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseGoscZamowienia> goscZamowieniaGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"zamowienia\" : [ {\r\n    \"bought_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"price\" : \"$650\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"hotel\" : \"@Hotel Lord\",\r\n    \"status\" : \"Waiting for payment (reception)\"\r\n  }, {\r\n    \"bought_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"price\" : \"$650\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"hotel\" : \"@Hotel Lord\",\r\n    \"status\" : \"Waiting for payment (reception)\"\r\n  } ]\r\n}", ResponseGoscZamowienia.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default GoscApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

