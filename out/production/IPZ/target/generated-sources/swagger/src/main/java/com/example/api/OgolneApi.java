/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.RequestOgolneAvatarUpdate;
import com.example.model.RequestOgolneDaneDostawy;
import com.example.model.RequestOgolneLogowanie;
import com.example.model.RequestOgolneRejestracja;
import com.example.model.RequestOgolneSupportTicket;
import com.example.model.RequestOgolneZmianaHasla;
import com.example.model.ResponseOgolneAvatarGet;
import com.example.model.ResponseOgolneAvatarUpdate;
import com.example.model.ResponseOgolneDaneDostawy;
import com.example.model.ResponseOgolneLogowanie;
import com.example.model.ResponseOgolneRejestracja;
import com.example.model.ResponseOgolneResolver;
import com.example.model.ResponseOgolneSupportTicket;
import com.example.model.ResponseOgolneUserNickname;
import com.example.model.ResponseOgolneZmianaHasla;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-04-01T20:32:28.347647700+02:00[Europe/Warsaw]")
@Validated
public interface OgolneApi {

    Logger log = LoggerFactory.getLogger(OgolneApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Pobierz link do awataru użytkownika", description = "Endpoint zwraca link do obrazu awataru użytkownika o podanym ID.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneAvatarGet.class))),
        
        @ApiResponse(responseCode = "404", description = "Użytkownik nie znaleziony") })
    @RequestMapping(value = "/ogolne/avatar/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseOgolneAvatarGet> ogolneAvatarIdGet(@Parameter(in = ParameterIn.PATH, description = "ID użytkownika", required=true, schema=@Schema()) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"avatar_url\" : \"https://example.com/avatars/user123.png\"\r\n}", ResponseOgolneAvatarGet.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Zaktualizuj link do awatara użytkownika", description = "Endpoint pozwala zalogowanemu użytkownikowi zaktualizować link do swojego awatara.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Awatar został zaktualizowany pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneAvatarUpdate.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowy URL"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/ogolne/avatar",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ResponseOgolneAvatarUpdate> ogolneAvatarPut(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestOgolneAvatarUpdate body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"avatar_url\" : \"https://example.com/avatars/new_avatar.jpg\",\r\n  \"message\" : \"Link do awatara został zaktualizowany.\"\r\n}", ResponseOgolneAvatarUpdate.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Zaktualizuj dane dostawy użytkownika", description = "Endpoint pozwala zalogowanemu użytkownikowi zaktualizować swoje dane dostawy.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Dane dostawy zostały zaktualizowane pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneDaneDostawy.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/ogolne/dane-dostawy",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ResponseOgolneDaneDostawy> ogolneDaneDostawyPut(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestOgolneDaneDostawy body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"dane_dostawy\" : {\r\n    \"street_address\" : \"Baker Street 11/2\",\r\n    \"email_address\" : \"john_smith@example.com\",\r\n    \"city\" : \"Szczecin\",\r\n    \"state_province_region\" : \"Zachodniopomorskie\",\r\n    \"phone_number\" : \"+48 123 456 789\",\r\n    \"zip_code\" : \"70-000\"\r\n  },\r\n  \"message\" : \"Dane dostawy zostały zaktualizowane.\"\r\n}", ResponseOgolneDaneDostawy.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Logowanie użytkownika", description = "Endpoint do logowania użytkownika do systemu.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Logowanie zakończone sukcesem", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneLogowanie.class))),
        
        @ApiResponse(responseCode = "401", description = "Nieprawidłowe dane logowania") })
    @RequestMapping(value = "/ogolne/logowanie",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseOgolneLogowanie> ogolneLogowaniePost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestOgolneLogowanie body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\r\n}", ResponseOgolneLogowanie.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Rejestracja nowego użytkownika", description = "Endpoint do rejestracji nowego użytkownika w systemu.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Użytkownik został zarejestrowany pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneRejestracja.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe") })
    @RequestMapping(value = "/ogolne/rejestracja",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseOgolneRejestracja> ogolneRejestracjaPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestOgolneRejestracja body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"id\" : 1,\r\n  \"typ_uzytkownika\" : \"gosc\",\r\n  \"login\" : \"jan_kowalski\",\r\n  \"email\" : \"jan.kowalski@example.com\"\r\n}", ResponseOgolneRejestracja.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Uzyskaj ID użytkownika na podstawie nazwy z @", description = "Endpoint pozwala uzyskać ID użytkownika na podstawie nazwy z @.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneResolver.class))),
        
        @ApiResponse(responseCode = "404", description = "Użytkownik nie znaleziony") })
    @RequestMapping(value = "/ogolne/resolver/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseOgolneResolver> ogolneResolverUsernameGet(@Parameter(in = ParameterIn.PATH, description = "Nazwa użytkownika z @", required=true, schema=@Schema()) @PathVariable("username") String username) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"user_id\" : 123\r\n}", ResponseOgolneResolver.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Wyślij ticket do supportu", description = "Endpoint do wysyłania zgłoszenia do działu wsparcia.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ticket został wysłany pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneSupportTicket.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe") })
    @RequestMapping(value = "/ogolne/support/ticket",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseOgolneSupportTicket> ogolneSupportTicketPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestOgolneSupportTicket body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Ticket został przyjęty do realizacji.\",\r\n  \"status\" : \"success\"\r\n}", ResponseOgolneSupportTicket.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz nick użytkownika z @ na początku", description = "Endpoint zwraca nick użytkownika z @ na początku na podstawie ID użytkownika.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneUserNickname.class))),
        
        @ApiResponse(responseCode = "404", description = "Użytkownik nie znaleziony") })
    @RequestMapping(value = "/ogolne/user/nickname/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseOgolneUserNickname> ogolneUserNicknameIdGet(@Parameter(in = ParameterIn.PATH, description = "ID użytkownika", required=true, schema=@Schema()) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"nickname\" : \"@jan_kowalski\"\r\n}", ResponseOgolneUserNickname.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Zmień hasło użytkownika", description = "Endpoint pozwala zalogowanemu użytkownikowi zmienić swoje hasło.", tags={ "Ogolne" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Hasło zostało zmienione pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseOgolneZmianaHasla.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji lub nieprawidłowe stare hasło") })
    @RequestMapping(value = "/ogolne/zmiana-hasla",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ResponseOgolneZmianaHasla> ogolneZmianaHaslaPut(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestOgolneZmianaHasla body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Hasło zostało pomyślnie zmienione.\"\r\n}", ResponseOgolneZmianaHasla.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OgolneApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

