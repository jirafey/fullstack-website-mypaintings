/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.RequestArtystaDzielo;
import com.example.model.ResponseArtystaDzielo;
import com.example.model.ResponseArtystaDzieloDelete;
import com.example.model.ResponseArtystaDzieloDeleteConflict;
import com.example.model.ResponseArtystaMojedziela;
import com.example.model.ResponseArtystaSales;
import com.example.model.ResponseArtystaStronahotelu;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-04-01T20:32:28.347647700+02:00[Europe/Warsaw]")
@Validated
public interface ArtystaApi {

    Logger log = LoggerFactory.getLogger(ArtystaApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Usuń dzieło artysty", description = "Endpoint pozwala artyście usunąć swoje dzieło z systemu.", tags={ "Artysta" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Dzieło zostało usunięte pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseArtystaDzieloDelete.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji lub użytkownik nie jest autorem dzieła"),
        
        @ApiResponse(responseCode = "404", description = "Dzieło nie znalezione"),
        
        @ApiResponse(responseCode = "409", description = "Nie można usunąć dzieła (np. jest już zarezerwowane lub sprzedane)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseArtystaDzieloDeleteConflict.class))) })
    @RequestMapping(value = "/artysta/dzielo/{image_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseArtystaDzieloDelete> artystaDzieloImageIdDelete(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID dzieła do usunięcia", required=true, schema=@Schema()) @PathVariable("image_id") Integer imageId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"deleted_image_id\" : 123,\r\n  \"message\" : \"Dzieło zostało pomyślnie usunięte.\"\r\n}", ResponseArtystaDzieloDelete.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ArtystaApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Dodaj nowe dzieło sztuki", description = "Endpoint pozwala artyście dodać nowe dzieło sztuki do systemu.", tags={ "Artysta" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Dzieło sztuki zostało dodane pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseArtystaDzielo.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/artysta/dzielo",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseArtystaDzielo> artystaDzieloPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestArtystaDzielo body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"date\" : \"2024-01-15T00:00:00.000+00:00\",\r\n  \"price\" : 1200,\r\n  \"description\" : \"Pejzaż przedstawiający góry o zachodzie słońca.\",\r\n  \"style\" : \"Realizm\",\r\n  \"id\" : 1,\r\n  \"medium\" : \"Olej na płótnie\",\r\n  \"title\" : \"Pejzaż górski\",\r\n  \"category\" : \"Malarstwo\",\r\n  \"dimensions\" : \"100x150 cm\"\r\n}", ResponseArtystaDzielo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ArtystaApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę dzieł artysty", description = "Endpoint zwraca listę dzieł artysty wraz z linkami do zdjęć.", tags={ "Artysta" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseArtystaMojedziela.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "403", description = "Brak dostępu") })
    @RequestMapping(value = "/artysta/mojedziela",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseArtystaMojedziela> artystaMojedzielaGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"dziela\" : [ {\r\n    \"viewers\" : 59,\r\n    \"date_of_post\" : \"2024-11-11T00:00:00.000+00:00\",\r\n    \"price\" : \"$600\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"hotel\" : \"@NY_Hotel_Star\",\r\n    \"id\" : 123,\r\n    \"likes\" : 12\r\n  }, {\r\n    \"viewers\" : 59,\r\n    \"date_of_post\" : \"2024-11-11T00:00:00.000+00:00\",\r\n    \"price\" : \"$600\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"hotel\" : \"@NY_Hotel_Star\",\r\n    \"id\" : 123,\r\n    \"likes\" : 12\r\n  } ]\r\n}", ResponseArtystaMojedziela.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ArtystaApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę sprzedanych dzieł artysty", description = "Endpoint zwraca listę sprzedanych dzieł artysty wraz z linkami do zdjęć.", tags={ "Artysta" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseArtystaSales.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "403", description = "Brak dostępu") })
    @RequestMapping(value = "/artysta/sales",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseArtystaSales> artystaSalesGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"sales\" : [ {\r\n    \"price\" : \"$650\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"hotel\" : \"@GoldenHotelNY\",\r\n    \"sold_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"likes\" : 13\r\n  }, {\r\n    \"price\" : \"$650\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"hotel\" : \"@GoldenHotelNY\",\r\n    \"sold_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"likes\" : 13\r\n  } ]\r\n}", ResponseArtystaSales.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ArtystaApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz link do strony hotelu", description = "Endpoint zwraca link do strony hotelu o podanym ID.", tags={ "Artysta" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseArtystaStronahotelu.class))),
        
        @ApiResponse(responseCode = "404", description = "Hotel nie znaleziony lub brak strony") })
    @RequestMapping(value = "/artysta/stronahotelu/{id_hotelu}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseArtystaStronahotelu> artystaStronahoteluIdHoteluGet(@Parameter(in = ParameterIn.PATH, description = "ID hotelu", required=true, schema=@Schema()) @PathVariable("id_hotelu") Integer idHotelu) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"website_url\" : \"https://www.example-hotel.com\"\r\n}", ResponseArtystaStronahotelu.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ArtystaApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

