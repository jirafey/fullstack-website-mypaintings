/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.RequestWiadomosciSendmessage;
import com.example.model.ResponseWiadomosciAcceptdelivery;
import com.example.model.ResponseWiadomosciAcceptreservation;
import com.example.model.ResponseWiadomosciCancelreservation;
import com.example.model.ResponseWiadomosciConfirmdelivery;
import com.example.model.ResponseWiadomosciFinalizeprocess;
import com.example.model.ResponseWiadomosciGetconversations;
import com.example.model.ResponseWiadomosciGetmessages;
import com.example.model.ResponseWiadomosciLatestTimestamps;
import com.example.model.ResponseWiadomosciRequestdelivery;
import com.example.model.ResponseWiadomosciReservepainting;
import com.example.model.ResponseWiadomosciSendmessage;
import com.example.model.ResponseWiadomosciTransactionstatus;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-04-01T20:32:28.347647700+02:00[Europe/Warsaw]")
@Validated
public interface WiadomosciApi {

    Logger log = LoggerFactory.getLogger(WiadomosciApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Zaakceptuj dostawę", description = "Endpoint pozwala zaakceptować dostawę.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Dostawa została zaakceptowana", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciAcceptdelivery.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/acceptdelivery/{idrezerwacji}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciAcceptdelivery> wiadomosciAcceptdeliveryIdrezerwacjiPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID rezerwacji dla której akceptujemy dostawę", required=true, schema=@Schema()) @PathVariable("idrezerwacji") Integer idrezerwacji) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Dostawa została zaakceptowana.\"\r\n}", ResponseWiadomosciAcceptdelivery.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Zaakceptuj rezerwację", description = "Endpoint pozwala zaakceptować rezerwację obrazu.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Rezerwacja została zaakceptowana", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciAcceptreservation.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/acceptreservation/{idrezerwacji}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciAcceptreservation> wiadomosciAcceptreservationIdrezerwacjiPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID rezerwacji do zaakceptowania", required=true, schema=@Schema()) @PathVariable("idrezerwacji") Integer idrezerwacji) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Rezerwacja została zaakceptowana.\"\r\n}", ResponseWiadomosciAcceptreservation.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Anuluj rezerwację", description = "Endpoint pozwala anulować rezerwację.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Rezerwacja została anulowana", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciCancelreservation.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/cancelreservation/{idrezerwacji}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciCancelreservation> wiadomosciCancelreservationIdrezerwacjiPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID rezerwacji do anulowania", required=true, schema=@Schema()) @PathVariable("idrezerwacji") Integer idrezerwacji) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Rezerwacja została anulowana.\"\r\n}", ResponseWiadomosciCancelreservation.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Potwierdź dostawę", description = "Endpoint pozwala potwierdzić dostawę.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Dostawa została potwierdzona", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciConfirmdelivery.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/confirmdelivery/{idrezerwacji}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciConfirmdelivery> wiadomosciConfirmdeliveryIdrezerwacjiPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID rezerwacji dla której potwierdzamy dostawę", required=true, schema=@Schema()) @PathVariable("idrezerwacji") Integer idrezerwacji) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Dostawa została potwierdzona.\"\r\n}", ResponseWiadomosciConfirmdelivery.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Finalizuj proces rezerwacji", description = "Endpoint pozwala finalizować proces rezerwacji.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Proces rezerwacji został zakończony", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciFinalizeprocess.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/finalizeprocess/{idrezerwacji}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciFinalizeprocess> wiadomosciFinalizeprocessIdrezerwacjiPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID rezerwacji do finalizacji", required=true, schema=@Schema()) @PathVariable("idrezerwacji") Integer idrezerwacji) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Proces rezerwacji został zakończony.\"\r\n}", ResponseWiadomosciFinalizeprocess.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę konwersacji", description = "Endpoint zwraca listę konwersacji z podstawowymi informacjami (URL awatara, ID użytkownika i ID transakcji)", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciGetconversations.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/getconversations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseWiadomosciGetconversations> wiadomosciGetconversationsGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"conversations\" : [ {\r\n    \"avatar_url\" : \"https://example.com/avatars/user123.png\",\r\n    \"user_id\" : 123,\r\n    \"id_transaction\" : 456\r\n  }, {\r\n    \"avatar_url\" : \"https://example.com/avatars/user123.png\",\r\n    \"user_id\" : 123,\r\n    \"id_transaction\" : 456\r\n  } ]\r\n}", ResponseWiadomosciGetconversations.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz Wiadomosci z konkretnej konwersacji", description = "Endpoint zwraca treść Wiadomosci wraz z timestampami dla wybranej konwersacji", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciGetmessages.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Konwersacja nie znaleziona") })
    @RequestMapping(value = "/wiadomosci/getmessages/{user_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseWiadomosciGetmessages> wiadomosciGetmessagesUserIdGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID użytkownika, z którym prowadzona jest konwersacja", required=true, schema=@Schema()) @PathVariable("user_id") Integer userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"messages\" : [ {\r\n    \"content\" : \"Cześć, jak tam Twoje nowe obrazy?\",\r\n    \"timestamp\" : \"2024-03-15T14:30:22Z\"\r\n  }, {\r\n    \"content\" : \"Cześć, jak tam Twoje nowe obrazy?\",\r\n    \"timestamp\" : \"2024-03-15T14:30:22Z\"\r\n  } ]\r\n}", ResponseWiadomosciGetmessages.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz timestampy najnowszych Wiadomosci z wszystkich konwersacji", description = "Endpoint zwraca tablicę zawierającą ID użytkowników i timestampy ich najnowszych Wiadomosci.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciLatestTimestamps.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "500", description = "Błąd serwera") })
    @RequestMapping(value = "/wiadomosci/latest-timestamps",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseWiadomosciLatestTimestamps> wiadomosciLatestTimestampsGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"timestamps\" : [ {\r\n    \"user_id\" : 123,\r\n    \"latest_timestamp\" : \"2024-03-15T14:30:22Z\"\r\n  }, {\r\n    \"user_id\" : 123,\r\n    \"latest_timestamp\" : \"2024-03-15T14:30:22Z\"\r\n  } ]\r\n}", ResponseWiadomosciLatestTimestamps.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Zażądaj dostawy", description = "Endpoint pozwala zażądać dostawy dla rezerwacji.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Żądanie dostawy zostało wysłane", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciRequestdelivery.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/requestdelivery/{idrezerwacji}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciRequestdelivery> wiadomosciRequestdeliveryIdrezerwacjiPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID rezerwacji dla której żądamy dostawy", required=true, schema=@Schema()) @PathVariable("idrezerwacji") Integer idrezerwacji) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Żądanie dostawy zostało wysłane.\"\r\n}", ResponseWiadomosciRequestdelivery.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Zarezerwuj obraz", description = "Endpoint pozwala zarezerwować określony obraz.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Rezerwacja została wysłana", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciReservepainting.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/wiadomosci/reservepainting/{idobrazu}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciReservepainting> wiadomosciReservepaintingIdobrazuPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu do rezerwacji", required=true, schema=@Schema()) @PathVariable("idobrazu") Integer idobrazu) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Prośba o rezerwację została wysłana.\"\r\n}", ResponseWiadomosciReservepainting.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Wyślij wiadomość", description = "Endpoint do wysyłania Wiadomosci między użytkownikami (artysta-hotel, hotel-gosc, artysta-gosc)", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Wiadomość została wysłana", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciSendmessage.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "403", description = "Brak uprawnień do wysłania Wiadomosci"),
        
        @ApiResponse(responseCode = "404", description = "Odbiorca nie znaleziony") })
    @RequestMapping(value = "/wiadomosci/sendmessage",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseWiadomosciSendmessage> wiadomosciSendmessagePost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestWiadomosciSendmessage body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message_id\" : 789,\r\n  \"timestamp\" : \"2024-03-20T14:30:22Z\",\r\n  \"status\" : \"SENT\"\r\n}", ResponseWiadomosciSendmessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz stan transakcji", description = "Endpoint zwraca aktualny stan transakcji na podstawie podanego ID.", tags={ "Wiadomosci" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseWiadomosciTransactionstatus.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Transakcja nie znaleziona") })
    @RequestMapping(value = "/wiadomosci/transactionstatus/{idtransakcji}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseWiadomosciTransactionstatus> wiadomosciTransactionstatusIdtransakcjiGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID transakcji do sprawdzenia", required=true, schema=@Schema()) @PathVariable("idtransakcji") Integer idtransakcji) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"transaction_id\" : 123,\r\n  \"last_updated\" : \"2024-03-15T14:30:22Z\",\r\n  \"status\" : \"W TRAKCIE\"\r\n}", ResponseWiadomosciTransactionstatus.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default WiadomosciApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

