/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.RequestHotelAddDeliveryInfo;
import com.example.model.RequestHotelStronahotelu;
import com.example.model.ResponseHotelAddDeliveryInfo;
import com.example.model.ResponseHotelArtystaFollow;
import com.example.model.ResponseHotelArtystaProfil;
import com.example.model.ResponseHotelArtystaUnfollow;
import com.example.model.ResponseHotelConfirmDelivery;
import com.example.model.ResponseHotelDeliveries;
import com.example.model.ResponseHotelFeed;
import com.example.model.ResponseHotelFollowedartists;
import com.example.model.ResponseHotelGenerateQr;
import com.example.model.ResponseHotelOwnedpaintings;
import com.example.model.ResponseHotelPaintingLike;
import com.example.model.ResponseHotelPaintingUnlike;
import com.example.model.ResponseHotelReservations;
import com.example.model.ResponseHotelSell;
import com.example.model.ResponseHotelStronaartysty;
import com.example.model.ResponseHotelStronahotelu;
import com.example.model.ResponseHotelStronaobrazu;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-05-28T06:59:25.623324300+02:00[Europe/Warsaw]")
@Validated
public interface HotelApi {

    Logger log = LoggerFactory.getLogger(HotelApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Dodaj informacje o dostawie do obrazu", description = "Endpoint pozwala dodać informacje o dostawie do obrazu o określonym ID.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Informacje o dostawie zostały dodane pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelAddDeliveryInfo.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/hotel/add-delivery-info/{idobrazu}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseHotelAddDeliveryInfo> hotelAddDeliveryInfoIdobrazuPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu, do którego dodawane są informacje o dostawie", required=true, schema=@Schema()) @PathVariable("idobrazu") Integer idobrazu, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestHotelAddDeliveryInfo body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"delivery_id\" : 1,\r\n  \"message\" : \"Informacje o dostawie zostały dodane do obrazu.\"\r\n}", ResponseHotelAddDeliveryInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Usuń follow dla artysty", description = "Endpoint pozwala usunąć follow dla danego artysty (wywoływane przez hotel).", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Follow został usunięty pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelArtystaUnfollow.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Artysta nie znaleziony") })
    @RequestMapping(value = "/hotel/artysta/follow/{id_artysty}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseHotelArtystaUnfollow> hotelArtystaFollowIdArtystyDelete(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID artysty, któremu usuwamy follow", required=true, schema=@Schema()) @PathVariable("id_artysty") Integer idArtysty) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Follow został usunięty.\"\r\n}", ResponseHotelArtystaUnfollow.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Dodaj follow dla artysty", description = "Endpoint pozwala dodać follow dla danego artysty (wywoływane przez hotel).", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Follow został dodany pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelArtystaFollow.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Artysta nie znaleziony") })
    @RequestMapping(value = "/hotel/artysta/follow/{id_artysty}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseHotelArtystaFollow> hotelArtystaFollowIdArtystyPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID artysty, któremu dodajemy follow", required=true, schema=@Schema()) @PathVariable("id_artysty") Integer idArtysty) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Follow został dodany.\"\r\n}", ResponseHotelArtystaFollow.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz link do profilu artysty", description = "Endpoint zwraca link do profilu artysty o podanym ID.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelArtystaProfil.class))),
        
        @ApiResponse(responseCode = "404", description = "Artysta nie znaleziony") })
    @RequestMapping(value = "/hotel/artysta/profil/{id_artysty}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelArtystaProfil> hotelArtystaProfilIdArtystyGet(@Parameter(in = ParameterIn.PATH, description = "ID artysty", required=true, schema=@Schema()) @PathVariable("id_artysty") Integer idArtysty) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"profile_url\" : \"https://example.com/artists/123\"\r\n}", ResponseHotelArtystaProfil.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Potwierdź dostarczenie obrazu", description = "Endpoint pozwala hotelowi potwierdzić dostarczenie obrazu.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Dostarczenie potwierdzone pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelConfirmDelivery.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/hotel/confirm-delivery/{image_id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseHotelConfirmDelivery> hotelConfirmDeliveryImageIdPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu", required=true, schema=@Schema()) @PathVariable("image_id") Integer imageId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Dostarczenie obrazu zostało potwierdzone.\"\r\n}", ResponseHotelConfirmDelivery.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę dostaw dla hotelu", description = "Endpoint zwraca listę dostaw dla hotelu wraz z adresami zasobów zdjęć.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelDeliveries.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/hotel/deliveries",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelDeliveries> hotelDeliveriesGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"deliveries\" : [ {\r\n    \"paid_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"ship_to\" : {\r\n      \"street_address\" : \"Baker Street 11/2\",\r\n      \"email_address\" : \"john_smith@example.com\",\r\n      \"city\" : \"Szczecin\",\r\n      \"state_province_region\" : \"Zachodniopomorskie\",\r\n      \"last_name\" : \"Smith\",\r\n      \"phone_number\" : \"+48 123 456 789\",\r\n      \"first_name\" : \"John\",\r\n      \"zip_code\" : \"70-000\"\r\n    },\r\n    \"buyer\" : \"@user2024\",\r\n    \"dimensions\" : \"100cm x 100cm x 10cm\"\r\n  }, {\r\n    \"paid_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"ship_to\" : {\r\n      \"street_address\" : \"Baker Street 11/2\",\r\n      \"email_address\" : \"john_smith@example.com\",\r\n      \"city\" : \"Szczecin\",\r\n      \"state_province_region\" : \"Zachodniopomorskie\",\r\n      \"last_name\" : \"Smith\",\r\n      \"phone_number\" : \"+48 123 456 789\",\r\n      \"first_name\" : \"John\",\r\n      \"zip_code\" : \"70-000\"\r\n    },\r\n    \"buyer\" : \"@user2024\",\r\n    \"dimensions\" : \"100cm x 100cm x 10cm\"\r\n  } ]\r\n}", ResponseHotelDeliveries.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz feed hotelu", description = "Endpoint zwraca feed hotelu, czyli tablicę linków do obrazów wraz z nickiem artysty i linkiem do jego awatara.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelFeed.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/hotel/feed",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelFeed> hotelFeedGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"feed\" : [ {\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"artist_nick\" : \"jan_kowalski\",\r\n    \"artist_avatar_url\" : \"https://example.com/avatars/jan_kowalski.png\",\r\n    \"painting_site\" : \"https://example.com/image_abc\"\r\n  }, {\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"artist_nick\" : \"jan_kowalski\",\r\n    \"artist_avatar_url\" : \"https://example.com/avatars/jan_kowalski.png\",\r\n    \"painting_site\" : \"https://example.com/image_abc\"\r\n  } ]\r\n}", ResponseHotelFeed.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę obserwowanych artystów", description = "Endpoint zwraca listę ID artystów obserwowanych przez hotel.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelFollowedartists.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/hotel/followedartists",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelFollowedartists> hotelFollowedartistsGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"artists\" : [ {\r\n    \"id_artysty\" : 123\r\n  }, {\r\n    \"id_artysty\" : 123\r\n  } ]\r\n}", ResponseHotelFollowedartists.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Wygeneruj kod QR dla obrazu", description = "Endpoint generuje kod QR dla danego obrazu i zwraca link do tego kodu QR.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Kod QR został wygenerowany pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelGenerateQr.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/hotel/generate-qr/{image_id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseHotelGenerateQr> hotelGenerateQrImageIdPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu", required=true, schema=@Schema()) @PathVariable("image_id") Integer imageId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"qr_code_url\" : \"https://example.com/qr-codes/image_123.png\"\r\n}", ResponseHotelGenerateQr.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę obrazów należących do hotelu", description = "Endpoint zwraca listę obrazów należących do hotelu wraz z dodatkowymi informacjami, takimi jak tytuł, wymiary, artysta, status i link do obrazu.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelOwnedpaintings.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/hotel/ownedpaintings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelOwnedpaintings> hotelOwnedpaintingsGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"paintings\" : [ {\r\n    \"artist\" : \"@artist2023\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"taken_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"title\" : \"Pejzaż górski\",\r\n    \"dimensions\" : \"50cm x 100cm x 10cm\",\r\n    \"status\" : \"IN DELIVERY TO YOU\"\r\n  }, {\r\n    \"artist\" : \"@artist2023\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"taken_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"title\" : \"Pejzaż górski\",\r\n    \"dimensions\" : \"50cm x 100cm x 10cm\",\r\n    \"status\" : \"IN DELIVERY TO YOU\"\r\n  } ]\r\n}", ResponseHotelOwnedpaintings.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Usuń like dla obrazu", description = "Endpoint pozwala usunąć like dla danego obrazu (wywoływane przez hotel).", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Like został usunięty pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelPaintingUnlike.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/hotel/painting/like/{image_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseHotelPaintingUnlike> hotelPaintingLikeImageIdDelete(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu, któremu usuwamy like", required=true, schema=@Schema()) @PathVariable("image_id") Integer imageId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"likes_count\" : 41,\r\n  \"message\" : \"Like został usunięty.\"\r\n}", ResponseHotelPaintingUnlike.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Dodaj like dla obrazu", description = "Endpoint pozwala dodać like dla danego obrazu (wywoływane przez hotel).", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Like został dodany pomyślnie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelPaintingLike.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/hotel/painting/like/{image_id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseHotelPaintingLike> hotelPaintingLikeImageIdPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu, któremu dodajemy like", required=true, schema=@Schema()) @PathVariable("image_id") Integer imageId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"likes_count\" : 42,\r\n  \"message\" : \"Like został dodany.\"\r\n}", ResponseHotelPaintingLike.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz listę zarezerwowanych dzieł", description = "Endpoint zwraca listę zarezerwowanych dzieł wraz z danymi rezerwacji i linkiem do zdjęcia.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelReservations.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/hotel/reservations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelReservations> hotelReservationsGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"reservations\" : [ {\r\n    \"reserved_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"buyer\" : \"@user2025\",\r\n    \"dimensions\" : \"100cm x 100cm x 10cm\"\r\n  }, {\r\n    \"reserved_on\" : \"2024-12-11T00:00:00.000+00:00\",\r\n    \"image_url\" : \"https://example.com/images/image.png\",\r\n    \"buyer\" : \"@user2025\",\r\n    \"dimensions\" : \"100cm x 100cm x 10cm\"\r\n  } ]\r\n}", ResponseHotelReservations.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Oznacz obraz jako sprzedany", description = "Endpoint pozwala hotelowi oznaczyć obraz o podanym ID jako sprzedany.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Obraz został oznaczony jako sprzedany", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelSell.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowe dane wejściowe"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/hotel/sell/{image_id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ResponseHotelSell> hotelSellImageIdPost(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu", required=true, schema=@Schema()) @PathVariable("image_id") Integer imageId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"message\" : \"Obraz został oznaczony jako sprzedany.\"\r\n}", ResponseHotelSell.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz dzieła artysty z informacją o polubieniach", description = "Endpoint zwraca tablicę dzieł danego artysty z URL obrazów i informacją czy hotel je polubił", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelStronaartysty.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Artysta nie znaleziony") })
    @RequestMapping(value = "/hotel/stronaartysty/{artist_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelStronaartysty> hotelStronaartystyArtistIdGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID artysty", required=true, schema=@Schema()) @PathVariable("artist_id") Integer artistId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"artist_info\" : {\r\n    \"avatar_url\" : \"https://example.com/avatars/jan_kowalski.png\",\r\n    \"nickname\" : \"@jan_kowalski\",\r\n    \"is_followed\" : true,\r\n    \"artist_id\" : 123\r\n  },\r\n  \"artworks\" : [ {\r\n    \"image_url\" : \"https://example.com/images/pejzaz.jpg\",\r\n    \"artwork_id\" : 456,\r\n    \"is_liked\" : true\r\n  }, {\r\n    \"image_url\" : \"https://example.com/images/pejzaz.jpg\",\r\n    \"artwork_id\" : 456,\r\n    \"is_liked\" : true\r\n  } ]\r\n}", ResponseHotelStronaartysty.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Dodaj lub zaktualizuj link do strony hotelu", description = "Endpoint pozwala hotelowi dodać lub zaktualizować link do swojej strony internetowej.", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Link do strony hotelu został zapisany", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelStronahotelu.class))),
        
        @ApiResponse(responseCode = "400", description = "Nieprawidłowy URL"),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji") })
    @RequestMapping(value = "/hotel/stronahotelu",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ResponseHotelStronahotelu> hotelStronahoteluPut(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody RequestHotelStronahotelu body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"website_url\" : \"https://www.example-hotel.com\",\r\n  \"message\" : \"Link do strony hotelu został zapisany.\"\r\n}", ResponseHotelStronahotelu.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Pobierz szczegóły obrazu", description = "Endpoint zwraca szczegółowe informacje o obrazie wraz z URL do zdjęć (takie same pola jak /artysta/dzielo)", tags={ "Hotel" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sukces", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseHotelStronaobrazu.class))),
        
        @ApiResponse(responseCode = "401", description = "Brak autoryzacji"),
        
        @ApiResponse(responseCode = "404", description = "Obraz nie znaleziony") })
    @RequestMapping(value = "/hotel/stronaobrazu/{obraz_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseHotelStronaobrazu> hotelStronaobrazuObrazIdGet(@Parameter(in = ParameterIn.HEADER, description = "Token JWT w formacie \"Bearer {token}\"" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.PATH, description = "ID obrazu", required=true, schema=@Schema()) @PathVariable("obraz_id") Integer obrazId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"date\" : \"2024-01-15T00:00:00.000+00:00\",\r\n  \"images\" : [ {\r\n    \"url\" : \"https://example.com/images/image1.jpg\"\r\n  }, {\r\n    \"url\" : \"https://example.com/images/image1.jpg\"\r\n  } ],\r\n  \"price\" : 1200,\r\n  \"description\" : \"Pejzaż przedstawiający góry o zachodzie słońca.\",\r\n  \"style\" : \"Realizm\",\r\n  \"medium\" : \"Olej na płótnie\",\r\n  \"title\" : \"Pejzaż górski\",\r\n  \"category\" : \"Malarstwo\",\r\n  \"artist_id\" : 456,\r\n  \"artist_nick\" : \"@jan_kowalski\",\r\n  \"artist_avatar_url\" : \"https://example.com/avatars/jan_kowalski.png\",\r\n  \"dimensions\" : \"100x150 cm\"\r\n}", ResponseHotelStronaobrazu.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HotelApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

